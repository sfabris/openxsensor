// config file writing function

void writeConf() {

  boolean dataFirst = true ;

  output = createWriter( outputConfigDir );

  output.println("// Configuration file generated by OpenXsensor Configurator " + oxsCversion + " the: " + day + "-" + month + "-" + year() );
  output.println("// !! This file is only compatible with version " + oxsVersion + " of OpenXsensor !!");
  output.println("");
  output.println("#ifndef OXS_CONFIG_h");
  output.println("#define OXS_CONFIG_h");
  output.println("// openxvario http://code.google.com/p/openxvario/");
  output.println("// started by Rainer Schlo√ühan");
  output.println("");

  // ---------------------------------- Protocol --------------------------------------

  if ( prot.getValue() == 2 ) {
    output.println("// *****************************");
    output.println("// **** Smart Port Protocol ****");
    output.println("// *****************************");
    output.println("#define FRSKY_SPORT               // put this line as comment if OXS is connected to a D serie receiver ( = Hub protocol); do not comment for X serie receiver.");
    output.println("#define SENSOR_ID           0x1B  // this parameter identifies a device connected on SPORT. It is not allowed having 2 devices with the same ID connected at the same time");
  } else {
    output.println("// ****************************");
    output.println("// ******** HUB Protocol ******");
    output.println("// ****************************");
  }

  // ---------------------------------- Serial pin --------------------------------------

  output.println("");
  output.println("#define PIN_SerialTX           " + serialPin.captionLabel().getText() + "  // The pin to transmit the serial data to the frsky telemetry enabled receiver");
  //output.println("                                  // It is a DIGITAL arduino pin that has to be connected to \"Rx\" pin from receiver (for D serie RX) or to Signal pin (for X serie RX)");
  //output.println("                                  // mandatory ; default: 4 ; allowed values are 0 up to 7 but take care not using the same pin as PPM (if PPM is used)");
  output.println("");

  // ------------------------------- Voltage reference -----------------------------------

  if ( cp5.getController("intRef").value() == 1 ) {
    output.println("#define USE_INTERNAL_REFERENCE    // Select the voltage reference, comment the line to activate the VCC voltage reference");
    output.println("//#define ARDUINOVCC              // Specify the VCC voltage of the arduino to correctly read ADC values");
    output.println("");
  } else {
    output.println("//#define USE_INTERNAL_REFERENCE    // Select the voltage reference, uncomment the line to activate the internal 1.1v voltage reference");
    output.println("#define ARDUINOVCC             " + cp5.getController("arduinoVccNb").getValueLabel().getText() + "  // Specify the VCC voltage of the arduino to correctly read ADC values");
    output.println("");
  }

  // -------------------------- Reset button ----------------------------

  if ( cp5.getController("resetButton").value() == 1 && cp5.getGroup("resetButtonPin").getValue() != -1 ) {
    output.println("// -------- Reset button --------");
    output.println("#define PIN_PushButton         " + cp5.get(DropdownList.class, "resetButtonPin").captionLabel().getText() + "  // check if a button has been pushed to reset some values (consumption, max altititude, max current, ...)");
    output.println("");
  }

  // -------------------------- Save to EEPROM ----------------------------

  if ( cp5.getController("saveEprom").value() == 1 ) {
    output.println("// -------- EEPROM save + Reset button --------");
    output.println("#define SAVE_TO_EEPROM            // If defined, some telemetry values will be stored in EEProm every 10 seconds.");
    output.println("                                  // These values will be restored every powerup. (e.g. mAh counted...)");
    output.println("");
  }

  // ---------------------------------- Vario --------------------------------------

  if ( cp5.getController("vario").value() == 1 ) {
    output.println("// -------- VARIO --------");
    output.println("#define VARIO                     // set as comment if there is no vario");
    output.println("");
    output.println("#define SENSITIVITY_MIN " + int(cp5.getController("sensMinMax").getArrayValue(0)) );
    output.println("#define SENSITIVITY_MAX " + int(cp5.getController("sensMinMax").getArrayValue(1)) );
    output.println("#define VSPEED_MIN " + int(cp5.getController("vSpeedMin").getValue()) );
    output.println("#define VSPEED_MAX " + int(cp5.getController("vSpeedMax").getValue()) );
    output.println("");

    if ( cp5.getController("ppm").value() == 1 ) {
      output.println("#define PIN_PPM                " + ppmPin.captionLabel().getText() + "  // Arduino can read a PPM Signal coming from Tx. This allows to change the vario sensitivity using a pot or a switch on TX.");
      output.println("");
      output.println("#define PPM_RANGE_MIN " + int(cp5.getController("ppmRngMin").getValue()) );
      output.println("#define PPM_RANGE_MAX " + int(cp5.getController("ppmRngMax").getValue()) );
      output.println("#define SENSITIVITY_PPM_MIN " + int(cp5.getController("ppmSensMinMax").getArrayValue(0)) );
      output.println("#define SENSITIVITY_PPM_MAX " + int(cp5.getController("ppmSensMinMax").getArrayValue(1)) );

      output.println("");
      output.println("// do not modify those lines");
      output.println("#ifdef PIN_PPM");
      output.println("  #if PIN_PPM == 2");
      output.println("       #define PPM_INTERRUPT                  ON  // define to use interrupt code in Aserial.cpp");
      output.println("");
      output.println("       #define PPM_INT_MASK                    3");
      output.println("       #define PPM_INT_EDGE                    1");
      output.println("       #define PPM_PIN_HEX                             0x02");
      output.println("       #define PPM_INT_BIT                             0x01");
      output.println("  #endif");
      output.println("");
      output.println("  #if PIN_PPM == 3");
      output.println("       #define PPM_INTERRUPT                   ON // define to use interrupt code in Aserial.cpp");
      output.println("       #define PPM_INT_MASK                    0x0C");
      output.println("       #define PPM_INT_EDGE                    0x04");
      output.println("       #define PPM_PIN_HEX                             0x04");
      output.println("       #define PPM_INT_BIT                             0x02");
      output.println("  #endif");
      output.println("#endif");

    } else {
      output.println("//#define PIN_PPM                // Arduino can read a PPM Signal coming from Tx. This allows to change the vario sensitivity using a pot or a switch on TX.");
      output.println("");
      output.println("//#define PPM_RANGE_MIN ");
      output.println("//#define PPM_RANGE_MAX ");
      output.println("//#define SENSITIVITY_PPM_MIN ");
      output.println("//#define SENSITIVITY_PPM_MAX ");
    }

    output.println("");
    output.println("#define VARIOHYSTERESIS " + int(cp5.getController("varioHysteresis").getValue()) );
    output.println("");
    if ( cp5.getController("analogClimb").value() == 1 ) {
      output.println("#define PIN_AnalogClimbRate " + climbPin.captionLabel().getText() + "  //  the pin used to write the vertical speed to the Rx A1 or A2 pin (can be 3 or 11 because it has to use timer 2)");
      output.println("");
      output.println("#define OutputClimbRateMin " + int(cp5.getController("outClimbRateMinMax").getArrayValue(0)) );
      output.println("#define OutputClimbRateMax " + int(cp5.getController("outClimbRateMinMax").getArrayValue(1)) );
    } else {
      output.println("//#define PIN_AnalogClimbRate   //  the pin used to write the vertical speed to the Rx A1 or A2 pin (can be 3 or 11 because it has to use timer 2)");
      output.println("");
      output.println("//#define OutputClimbRateMin ");
      output.println("//#define OutputClimbRateMax ");
    }

    output.println("");

  } else {
    output.println("// -------- VARIO (required parameters even if not active) --------");
    output.println("");
    output.println("#define SENSITIVITY_MIN " + int(cp5.getController("sensMinMax").getArrayValue(0)) );
    output.println("#define SENSITIVITY_MAX " + int(cp5.getController("sensMinMax").getArrayValue(1)) );
    output.println("#define VSPEED_MIN " + int(cp5.getController("vSpeedMin").getValue()) );
    output.println("#define VSPEED_MAX " + int(cp5.getController("vSpeedMax").getValue()) );
    output.println("");
    output.println("#define VARIOHYSTERESIS " + int(cp5.getController("varioHysteresis").getValue()) );
    output.println("");
  }

  // ---------------------------------- Voltage --------------------------------------

  output.println("// -------- Voltage --------");

  for ( int i = 1; i <= voltNbr; i++ ) {
    if ( cp5.getController( "voltage" ).value() == 1 && cp5.getController( "volt" + i ).value() == 1 && int(cp5.getGroup("ddlVolt" + i).getValue()) >= 0 ) {
      output.println("#define PIN_Voltage" + i + "   " + int(cp5.getGroup("ddlVolt" + i).getValue()) + "    //  Pin for measuring Voltage " + i + " ( Analog Pin! )");
    } else {
      output.println("#define PIN_Voltage" + i + " " + 8 + "      //  Pin for measuring Voltage " + i + " ( Analog Pin! )");
    }
  }
  output.println("");

  for ( int i = 1; i <= voltNbr; i++ ) {
    if ( cp5.getController( "voltage" ).value() == 1 && cp5.getController( "volt" + i ).value() == 1 ) {
      output.println("#define offset_" + i + "             " + cp5.getController("offsetVolt" + i).getValueLabel().getText() + "                                       // offset in mv");
      if ( cp5.getController("intRef").value() == 0 ) {
        output.println("#define mVoltPerStep_" + i + "       ( ARDUINOVCC * 1000.0 / 1024.0 * " + cp5.getController("dividerVolt" + i ).getValueLabel().getText() + " )  // => last number is the divider factor");
      } else {
        output.println("#define mVoltPerStep_" + i + "       ( 1.1 * 1000.0 / 1024.0 * " + cp5.getController("dividerVolt" + i ).getValueLabel().getText() + " )  // => last number is the divider factor");
      }
    } else {
      output.println("#define offset_" + i + "             " + 0 + "                                       // offset in mv");
      output.println("#define mVoltPerStep_" + i + "       " + 1 + "  ");
    }
  }
  output.println("");

  if ( cp5.getController( "voltage" ).value() == 1 && cp5.getController( "cells" ).value() == 1 ) {
    output.println("#define NUMBEROFCELLS " + ( int(cp5.getGroup("ddlNbrCells").getValue()) ) + "  // keep this line but set value to 0 (zero) if you do not want to transmit cell voltage.");
  } else {
    output.println("#define NUMBEROFCELLS " + 0 + "  // keep this line but set value to 0 (zero) if you do not want to transmit cell voltage.");
  }
  output.println("");

  // ---------------------------------- Current sensor --------------------------------------

  if ( cp5.getController( "current" ).value() == 1 && int(cp5.getGroup("currentPin").getValue()) >= 0 ) {
    output.println("// -------- Current sensor --------");
    output.println("#define PIN_CurrentSensor          " + ( int(cp5.getGroup("currentPin").getValue()) ) + "       // The Analog pin the optional current Sensor is connected to");
    output.println("#define mAmpPerStep                " + round(mAmpStep(), 2) + "   // INA282 with 0.1 ohm shunt gives 5000mv/A ");
    output.println("#define offsetCurrentSteps         " + offsetCurrent() + "      // 66mv offset (set to zero for now)");
  } else {
    //output.println("//#define PIN_CurrentSensor        // The Analog pin the optional current Sensor is connected to");
    //output.println("//#define mAmpPerStep              // INA282 with 0.1 ohm shunt gives 5000mv/A ");
    //output.println("//#define offsetCurrentSteps       // 66mv offset (set to zero for now)");
  }
  output.println("");

  // ---------------------------------- Temperature sensor --------------------------------------

  if ( tempActive ) {
    if ( cp5.getController( "temperature" ).value() == 1 && int(cp5.getGroup("tempPin").getValue()) >= 0 ) {
     output.println("// -------- Temperature sensor --------");
     output.println("#define PIN_TemperatureSensor   " + ( int(cp5.getGroup("tempPin").getValue()) ) + "  // The Analog pin the optional temperature sensor is connected to");
     output.println("#define TEMPOFFSET              " + cp5.get(Textfield.class, "tempOffset").getText() + "  // Calibration offset");
     } else {
     //output.println("#define PIN_TemperatureSensor        // The Analog pin the optional temperature sensor is connected to");
     //output.println("#define TEMPOFFSET                   // Calibration offset");
     }
     output.println("");
  }

  // ---------------------------------- RPM sensor --------------------------------------

  if ( cp5.getController( "rpm" ).value() == 1 ) {
    output.println("// ----------- RPM sensor -----------");
    output.println("#define MEASURE_RPM   1") ;
  }
  output.println("");
  output.println("");

  // ---------------------------------- HUB telemetry data list --------------------------------------

  output.println("// ----------------------------- HUB telemetry data list ---------------------------------");
  output.println("// This is the list of all (main) telemetry fields supported by Hub protocol");
  output.println("// You can use code from this list when you define in which telemetry field a measurement has to be transmitted");
  output.println("//     Do not modify this list");
  output.println("");
  output.println("#define FRSKY_USERDATA_GPS_ALT_B       0x01");
  output.println("#define FRSKY_USERDATA_TEMP1           0x02");
  output.println("#define FRSKY_USERDATA_RPM             0x03");
  output.println("#define FRSKY_USERDATA_FUEL            0x04");
  output.println("#define FRSKY_USERDATA_TEMP2           0x05");
  output.println("#define FRSKY_USERDATA_CELL_VOLT       0x06");
  output.println("#define FRSKY_USERDATA_GPS_ALT_A       0x09");
  output.println("#define FRSKY_USERDATA_BARO_ALT_B      0x10");
  output.println("#define FRSKY_USERDATA_GPS_SPEED_B     0x11");
  output.println("#define FRSKY_USERDATA_GPS_LONG_B      0x12");
  output.println("#define FRSKY_USERDATA_GPS_LAT_B       0x13");
  output.println("#define FRSKY_USERDATA_GPS_CURSE_B     0x14");
  output.println("#define FRSKY_USERDATA_GPS_DM          0x15");
  output.println("#define FRSKY_USERDATA_GPS_YEAR        0x16");
  output.println("#define FRSKY_USERDATA_GPS_HM          0x17");
  output.println("#define FRSKY_USERDATA_GPS_SEC         0x18");
  output.println("#define FRSKY_USERDATA_GPS_SPEED_A     0x19");
  output.println("#define FRSKY_USERDATA_GPS_LONG_A      0x1A");
  output.println("#define FRSKY_USERDATA_GPS_LAT_A       0x1B");
  output.println("#define FRSKY_USERDATA_GPS_CURSE_A     0x1C");
  output.println("#define FRSKY_USERDATA_BARO_ALT_A      0x21");
  output.println("#define FRSKY_USERDATA_GPS_LONG_EW     0x22");
  output.println("#define FRSKY_USERDATA_GPS_LAT_EW      0x23");
  output.println("#define FRSKY_USERDATA_ACC_X           0x24");
  output.println("#define FRSKY_USERDATA_ACC_Y           0x25");
  output.println("#define FRSKY_USERDATA_ACC_Z           0x26");
  output.println("#define FRSKY_USERDATA_CURRENT         0x28");
  output.println("#define FRSKY_USERDATA_VERT_SPEED      0x30 // openTX Vario Mode Only");
  output.println("#define FRSKY_USERDATA_ALT_MIN         0x31 // openTX Vario Mode Only");
  output.println("#define FRSKY_USERDATA_ALT_MAX         0x32 // openTX Vario Mode Only");
  output.println("#define FRSKY_USERDATA_RPM_MAX         0x33 // openTX Vario Mode Only");
  output.println("#define FRSKY_USERDATA_T1_MAX          0x34 // openTX Vario Mode Only");
  output.println("#define FRSKY_USERDATA_T2_MAX          0x35 // openTX Vario Mode Only");
  output.println("#define FRSKY_USERDATA_GPS_SPEED_MAX   0x36 // openTX Vario Mode Only");
  output.println("#define FRSKY_USERDATA_GPS_DIS_MAX     0x37 // openTX Vario Mode Only");
  output.println("#define FRSKY_USERDATA_VFAS_NEW        0x39 // openTX Vario Mode Only");
  output.println("#define FRSKY_USERDATA_VOLTAGE_B       0x3A");
  output.println("#define FRSKY_USERDATA_VOLTAGE_A       0x3B");
  output.println("#define FRSKY_USERDATA_GPS_DIST        0x3C");
  output.println("#define FRSKY_USERDATA_FUELPERCENT     0x3D");
  output.println("// End of list of all telemetry fields supported by Hub protocol (defined by Frsky)");
  output.println("");

  // ---------------------------------- SMART PORT telemetry data list --------------------------------------

  output.println("// ---------------------------- SMART PORT telemetry data list ------------------------------");
  output.println("// This is the list of all (main) telemetry fields supported by SPORT");
  output.println("// Note : some of those values may not (yet) be displayed on Taranis");
  output.println("// You can use code from this list when you define in which telemetry field a measurement has to be transmitted");
  output.println("//     Do not modify this list");
  output.println("");
  output.println("//#define RSSI_ID            0xf101  // please do not use this code because it is already used by the receiver");
  output.println("//#define ADC1_ID            0xf102  // please do not use this code because it is already used by the receiver");
  output.println("#define ADC2_ID            0xf103");
  output.println("#define BATT_ID            0xf104");
  output.println("//#define SWR_ID             0xf105   // please do not use this code because it is already used by the receiver");
  output.println("#define T1_FIRST_ID        0x0400");
  output.println("#define T1_LAST_ID         0x040f");
  output.println("#define T2_FIRST_ID        0x0410");
  output.println("#define T2_LAST_ID         0x041f");
  output.println("#define RPM_FIRST_ID       0x0500");
  output.println("#define RPM_LAST_ID        0x050f");
  output.println("#define FUEL_FIRST_ID      0x0600");
  output.println("#define FUEL_LAST_ID       0x060f");
  output.println("#define ALT_FIRST_ID       0x0100");
  output.println("#define ALT_LAST_ID        0x010f");
  output.println("#define VARIO_FIRST_ID     0x0110");
  output.println("#define VARIO_LAST_ID      0x011f");
  output.println("#define ACCX_FIRST_ID      0x0700");
  output.println("#define ACCX_LAST_ID       0x070f");
  output.println("#define ACCY_FIRST_ID      0x0710");
  output.println("#define ACCY_LAST_ID       0x071f");
  output.println("#define ACCZ_FIRST_ID      0x0720");
  output.println("#define ACCZ_LAST_ID       0x072f");
  output.println("#define CURR_FIRST_ID      0x0200");
  output.println("#define CURR_LAST_ID       0x020f");
  output.println("#define VFAS_FIRST_ID      0x0210");
  output.println("#define VFAS_LAST_ID       0x021f");
  output.println("#define GPS_SPEED_FIRST_ID 0x0830");
  output.println("#define GPS_SPEED_LAST_ID  0x083f");
  output.println("#define CELLS_FIRST_ID     0x0300");
  output.println("#define CELLS_SECOND_ID    0x0301");
  output.println("#define CELLS_THIRD_ID     0x0302");
  output.println("#define CELLS_LAST_ID      0x030f");
  output.println("// End of list of all telemetry fields supported by SPORT  (defined by Frsky)");
  output.println("");

  // ---------------------------------- Default field --------------------------------------

  output.println("// ---------------------------- Default field ------------------------------");
  output.println("#define DEFAULTFIELD             0x00");
  output.println("");

  // ---------------------------------- Transmitted data list --------------------------------------

  output.println("// ---------------------------- Transmitted data list ------------------------------");
  output.println("//  This is the list of codes for each available measurement");
  output.println("//  Use those codes when you define which data has to be transmitted");
  output.println("//  Do not change those values");
  output.println("");
  output.println("enum DataToTransmit {");
  output.println("    ALTIMETER = 1,            // DEFAULTFIELD can be used in SPORT protocol (is then the same as ALT_FIRST_ID);  it MUST be used in Hub protocol because meters and centimeters are sent in different fileds");
  output.println("    VERTICAL_SPEED,           // DEFAULTFIELD can be used");
  output.println("    SENSITIVITY,              // DEFAULTFIELD can NOT be used");
  output.println("    ALT_OVER_10_SEC,          // DEFAULTFIELD can NOT be used ; this is the difference of altitude over the last 10 sec (kind of averaging vertical speed)");
  output.println("                              // there is no telemetry field for this; it is possible to use e.g. T1 or T2; then you can use a custom function \"play value\" on Tx side");
  output.println("    VOLT1,                    // DEFAULTFIELD can NOT be used");
  output.println("    VOLT2,                    // DEFAULTFIELD can NOT be used");
  output.println("    VOLT3,                    // DEFAULTFIELD can NOT be used");
  output.println("    VOLT4,                    // DEFAULTFIELD can NOT be used");
  output.println("    VOLT5,                    // DEFAULTFIELD can NOT be used");
  output.println("    VOLT6,                    // DEFAULTFIELD can NOT be used");
  output.println("    CURRENTMA,                // DEFAULTFIELD can be used");
  output.println("    MILLIAH,                  // if value must be sent as percentage, then uncomment the line \"#define SEND_mAhPercentageAsFuel 4000\"");
  output.println("    CELLS_1_2,                // Only DEFAULTFIELD can be used");
  output.println("    CELLS_3_4,                // Only DEFAULTFIELD can be used");
  output.println("    CELLS_5_6,                // Only DEFAULTFIELD can be used");
  output.println("    RPM,                      // Only DEFAULTFIELD can be used");
  //output.println("    VARIOTEMP,                // DEFAULTFIELD can NOT be used   // Temperature from the MS5611 sensor");
  //output.println("    TEMP1,                    // DEFAULTFIELD can be used");
  //output.println("    TEMP2                     // Not usable yet  // DEFAULTFIELD can be used");
  output.println("} ;  // End of list of type of available measurements");
  output.println("");

  // ---------------------------------- Transmitted data setting --------------------------------------

  output.println("// ---------------------------- Transmitted data setting ------------------------------");
  output.println("");
  output.println("#define SETUP_DATA_TO_SEND    \\");
  for ( int i = 1; i <= dataSentFieldNbr; i++ ) {
    if ( cp5.getGroup("sentDataField" + i ).getValue() != 0 ) {
      if ( !dataFirst ) {
        output.println(" , \\");
      }
      if ( cp5.get(DropdownList.class, "sentDataField" + i ).captionLabel().getText().equals("Cells monitoring") ) {
        if ( cp5.getController("cells").getValue() == 1 ) {
          for ( int j = 1 ; j <= int( cp5.getGroup("ddlNbrCells").getValue() ) ; j += 2 ) {
            output.print("                        " + "DEFAULTFIELD , CELLS_" + j + "_" + ( j + 1 ) + " , 1 , 1 , 0" );
            if ( int( cp5.getGroup("ddlNbrCells").getValue() ) > ( j + 1 ) ) {
              output.println(" , \\");
            }
            dataFirst = false ;
          }
        }
      } else if ( cp5.getGroup("protocolChoice").getValue() == 1 ) {
        output.print("                        " + hubDataList[int(cp5.getGroup("hubDataField" + i ).getValue())][0] + " , "
          + sentDataList[int(cp5.getGroup("sentDataField" + i ).getValue())][0] + " , "
          + cp5.getController("dataMultiplier" + i).getValueLabel().getText() + " , "
          + cp5.getController("dataDivider" + i).getValueLabel().getText() + " , "
          + cp5.getController("dataOffset" + i).getValueLabel().getText() );
        dataFirst = false ;
      } else {
        output.print("                        " + sPortDataList[int(cp5.getGroup("sPortDataField" + i ).getValue())][0] + " , "
          + sentDataList[int(cp5.getGroup("sentDataField" + i ).getValue())][0] + " , "
          + cp5.getController("dataMultiplier" + i).getValueLabel().getText() + " , "
          + cp5.getController("dataDivider" + i).getValueLabel().getText() + " , "
          + cp5.getController("dataOffset" + i).getValueLabel().getText() );
        dataFirst = false ;
      }
    }
  }
  output.println("");
  output.println("");

  // ---------------------------------- Other parameters --------------------------------------

  output.println("// ---------------------------- Other parameters ------------------------------");
  output.println("");
  output.println("// There is normally no reason to change the 2 next parameters");
  output.println("#define I2CAdd           0x77  // 0x77 The I2C Address of the MS5611 breakout board");
  output.println("                               // (normally 0x76 or 0x77 configured on the MS5611 module");
  output.println("");
  output.println("#define PIN_LED            13  // The Signal LED (default=13=onboard LED)");
  output.println("");

  // ---------------------------------- The end --------------------------------------

  output.println("");
  output.println("#endif// End define OXS_CONFIG_h");

  output.flush(); // Writes the remaining data to the file
  output.close(); // Finishes the file

    //exit(); // Stops the program
}
